[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Automated Machine Learning with H20",
    "section": "",
    "text": "library(tidymodels)\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(stringr)\nemployee_attrition_tbl &lt;- read.table(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt\", header = TRUE, sep = \",\" )\ndept_job_role_tbl &lt;- employee_attrition_tbl %&gt;%\n  select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)\ndept_job_role_tbl %&gt;%\n  \n  group_by(Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n\n\n# Attrition by department\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2: Caution: It's easy to inadvertently miss grouping when creating counts & percents within groups\n  group_by(Department) %&gt;%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n\n\n# Attrition by job role\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\")\n\n\n\n  \n\n\n\n\n# Develop KPI\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  )\n\n\n\n  \n\n\n\n\n# Function to calculate attrition cost\ncalculate_attrition_cost &lt;- function(\n  \n  # Employee\n  n                    = 1,\n  salary               = 80000,\n  \n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n  \n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n  \n) {\n  \n  # Direct Costs\n  direct_cost &lt;- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n  \n  # Lost Productivity Costs\n  productivity_cost &lt;- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n  \n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction &lt;- salary / workdays_per_year * workdays_position_open\n  \n  # Estimated Turnover Per Employee\n  cost_per_employee &lt;- direct_cost + productivity_cost - salary_benefit_reduction\n  \n  # Total Cost of Employee Turnover\n  total_cost &lt;- n * cost_per_employee\n  \n  return(total_cost)\n  \n}\ncalculate_attrition_cost()\n\n#&gt; [1] 78483.33\n\ncalculate_attrition_cost(200)\n\n#&gt; [1] 15696667\n\n\n\n# Function creation\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %&gt;%\n  \n  # Block 4. Set salaray to 80000 for now\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n\n\n  \n\n\n\n\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition)\n\n\n\n  \n\n\n# Function to convert counts to percentages. \ncount_to_pct &lt;- function(data, ..., col = n) {\n  # capture the dots\n  grouping_vars_expr &lt;- quos(...)\n  col_expr &lt;- enquo(col)\n  ret &lt;- data %&gt;%\n    group_by(!!! grouping_vars_expr) %&gt;%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %&gt;%\n    ungroup()\n  return(ret)\n}\ndept_job_role_tbl %&gt;%\n  count(JobRole, Attrition) %&gt;%\n  count_to_pct(JobRole)\n\n\n\n  \n\n\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) \n\n\n\n  \n\n\n\n\ndept_job_role_tbl %&gt;%\n  \n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %&gt;%\n  \n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n\n\n  \n\n\n\n\nassess_attrition &lt;- function(data, attrition_col, attrition_value, baseline_pct) {\n  \n  attrition_col_expr &lt;- enquo(attrition_col)\n  \n  data %&gt;%\n    \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %&gt;%\n    arrange(desc(pct)) %&gt;%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct &gt; baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n  \n}\n \n# Visualization\ndept_job_role_tbl %&gt;%\n  \n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) %&gt;%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %&gt;%\n  \n  # Data Manipulation\n  mutate(name = str_c(Department, JobRole, sep = \": \") %&gt;% as_factor()) %&gt;%\n  \n  # Check levels\n  # pull(name) %&gt;%\n  # levels()\n  \n  mutate(name      = fct_reorder(name, cost_of_attrition)) %&gt;%\n  mutate(cost_text = str_c(\"$\", format(cost_of_attrition / 1e6, digits = 2),\n                           \"M\", sep = \"\")) %&gt;%\n  \n  #Plotting\n  ggplot(aes(cost_of_attrition, y = name)) +\n  geom_segment(aes(xend = 0, yend = name),    color = \"#2dc6d6\") +\n  geom_point(  aes(size = cost_of_attrition), color = \"#2dc6d6\") +\n  scale_x_continuous(labels = scales::dollar) +\n  geom_label(aes(label = cost_text, size = cost_of_attrition),\n             hjust = \"inward\", color = \"#2dc6d6\") +\n  scale_size(range = c(3, 5)) +\n  labs(title = \"Estimated cost of Attrition: By Dept and Job Role\",\n       y = \"\",\n       x = \"Cost of attrition\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n# Descriptive Features\nemployee_attrition_tbl %&gt;% select(Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18)\n\n\n\n  \n\n\n\n\n# Employment Features\nemployee_attrition_tbl %&gt;% select(Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction)\n\n\n\n  \n\n\n\n\n# Compensation Features\nemployee_attrition_tbl %&gt;% select(DailyRate, HourlyRate, MonthlyIncome, MonthlyRate, PercentSalaryHike, StockOptionLevel)\n\n\n\n  \n\n\n\n\n# Survery Results\nemployee_attrition_tbl %&gt;% select(EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance)\n\n\n\n  \n\n\n\n\n# Performance Data\nemployee_attrition_tbl %&gt;% select(JobInvolvement, PerformanceRating)\n\n\n\n  \n\n\n\n\n# Work-Life Features\nemployee_attrition_tbl %&gt;% select(BusinessTravel, OverTime)\n\n\n\n  \n\n\n\n\n# Training & Education\nemployee_attrition_tbl %&gt;% select(Education, EducationField, TrainingTimesLastYear)\n\n\n\n  \n\n\n\n\n# Time-Based Features\nemployee_attrition_tbl %&gt;% select(TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager)\n\n\n\n  \n\n\n\n\nlibrary(GGally)\n# Step 2: Data Visualization ----\nemployee_attrition_tbl %&gt;%\n  select(Attrition,  Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  ggpairs()\n\n\n\n\n\n\n\n\n\n# Explore Features by Category\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n\n#   1. Descriptive features: age, gender, marital status \nemployee_attrition_tbl %&gt;%\n  select(Attrition, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   2. Employment features: department, job role, job level\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"employee\"), contains(\"department\"), contains(\"job\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   4. Survey Results: Satisfaction level, Work Life Balance \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   5. Performance Data: Job Involvement, Performance Rating\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   6. Work-Life Features \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   7. Training and Education \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   8. Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"years\")) %&gt;%\n  plot_ggpairs(Attrition)"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Performance Measures",
    "section": "",
    "text": "library(tidymodels)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(rstanarm)\nlibrary(broom.mixed)\nlibrary(h2o)\nproduct_backorders_tbl &lt;- read.table(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/product_backorders.txt\",header = TRUE, sep = \",\" )\nproduct_backorders_tbl %&gt;% glimpse()\n\n#&gt; Rows: 19,053\n#&gt; Columns: 23\n#&gt; $ sku               &lt;int&gt; 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#&gt; $ national_inv      &lt;int&gt; 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#&gt; $ lead_time         &lt;int&gt; 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#&gt; $ in_transit_qty    &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#&gt; $ forecast_3_month  &lt;int&gt; 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#&gt; $ forecast_6_month  &lt;int&gt; 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#&gt; $ forecast_9_month  &lt;int&gt; 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#&gt; $ sales_1_month     &lt;int&gt; 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#&gt; $ sales_3_month     &lt;int&gt; 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#&gt; $ sales_6_month     &lt;int&gt; 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#&gt; $ sales_9_month     &lt;int&gt; 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#&gt; $ min_bank          &lt;int&gt; 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#&gt; $ potential_issue   &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ pieces_past_due   &lt;int&gt; 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#&gt; $ perf_6_month_avg  &lt;dbl&gt; 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#&gt; $ perf_12_month_avg &lt;dbl&gt; 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#&gt; $ local_bo_qty      &lt;int&gt; 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ deck_risk         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ oe_constraint     &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ ppap_risk         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#&gt; $ stop_auto_buy     &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#&gt; $ rev_stop          &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ went_on_backorder &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n\n\ndata_split &lt;- initial_split(product_backorders_tbl, prop = 3/4)\n# Assign training and test data\ntrain_data &lt;- training(data_split)\ntest_data  &lt;- testing(data_split)\n# Specifying of the response and the predictor variables\nfactor_names &lt;- c(\"went_on_backorder\")\nproduct_rec &lt;- \n  recipe(went_on_backorder ~ ., data = train_data) %&gt;%  \n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  step_mutate_at(factor_names, fn = as.factor) %&gt;%\n  prep()\nd &lt;- summary(product_rec)\ntrain_tbl &lt;- bake(product_rec, new_data = train_data)\ntest_tbl  &lt;- bake(product_rec, new_data = test_data)\n\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         22 minutes 45 seconds \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.44.0.3 \n#&gt;     H2O cluster version age:    4 months and 9 days \n#&gt;     H2O cluster name:           H2O_started_from_R_gurur_tqq034 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   3.88 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.4.0 (2024-04-24 ucrt)\n\n# Splitting the data for validation df\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.75), seed = 1234)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Predictors\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\n\n# AutoML Model\nh2o_models_automl &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |====                                                                  |   5%\n#&gt; 14:17:55.514: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#&gt; 14:17:55.526: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(h2o_models_automl)\n\n#&gt; [1] \"S4\"\n\nslotNames(h2o_models_automl)\n\n#&gt; [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#&gt; [5] \"modeling_steps\" \"training_info\"\n\nh2o_models_automl@leaderboard \n\n#&gt;                                                  model_id       auc   logloss\n#&gt; 1    StackedEnsemble_AllModels_2_AutoML_2_20240430_141755 0.9476004 0.1709030\n#&gt; 2    StackedEnsemble_AllModels_1_AutoML_2_20240430_141755 0.9475357 0.1707997\n#&gt; 3 StackedEnsemble_BestOfFamily_1_AutoML_2_20240430_141755 0.9466569 0.1721029\n#&gt; 4                          GBM_1_AutoML_2_20240430_141755 0.9465839 0.1723861\n#&gt; 5 StackedEnsemble_BestOfFamily_3_AutoML_2_20240430_141755 0.9465442 0.1720833\n#&gt; 6 StackedEnsemble_BestOfFamily_2_AutoML_2_20240430_141755 0.9464577 0.1721587\n#&gt;       aucpr mean_per_class_error      rmse        mse\n#&gt; 1 0.7192665            0.1527247 0.2240270 0.05018808\n#&gt; 2 0.7182430            0.1525014 0.2242020 0.05026652\n#&gt; 3 0.7139912            0.1564825 0.2264790 0.05129274\n#&gt; 4 0.7141399            0.1548534 0.2264028 0.05125823\n#&gt; 5 0.7159933            0.1564825 0.2264198 0.05126594\n#&gt; 6 0.7149825            0.1643786 0.2265541 0.05132674\n#&gt; \n#&gt; [14 rows x 7 columns]\n\n#h2o_models_automl@leader\n\n\n#h2o.getModel(\"GBM_1_AutoML_1_20240430_135534\") %&gt;% \n # h2o.saveModel(path = \"F:/Sneha/ss23-bdml-SnehaPara/Dataset/h20_models/\")\nh2o.loadModel(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/h20_models/GBM_1_AutoML_1_20240430_135534\")\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: gbm\n#&gt; Model ID:  GBM_1_AutoML_1_20240430_135534 \n#&gt; Model Summary: \n#&gt;   number_of_trees number_of_internal_trees model_size_in_bytes min_depth\n#&gt; 1              97                       97               76594         9\n#&gt;   max_depth mean_depth min_leaves max_leaves mean_leaves\n#&gt; 1        15   14.27835         16         68    57.95876\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: gbm\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.03498635\n#&gt; RMSE:  0.1870464\n#&gt; LogLoss:  0.1239342\n#&gt; Mean Per-Class Error:  0.09665386\n#&gt; AUC:  0.9811421\n#&gt; AUCPR:  0.8902228\n#&gt; Gini:  0.9622843\n#&gt; R^2:  0.6617647\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     9226  268 0.028228   =268/9494\n#&gt; Yes     208 1052 0.165079   =208/1260\n#&gt; Totals 9434 1320 0.044263  =476/10754\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.374871    0.815504 186\n#&gt; 2                       max f2  0.218325    0.858882 240\n#&gt; 3                 max f0point5  0.551949    0.840016 128\n#&gt; 4                 max accuracy  0.442773    0.956853 164\n#&gt; 5                max precision  0.974785    1.000000   0\n#&gt; 6                   max recall  0.013144    1.000000 371\n#&gt; 7              max specificity  0.974785    1.000000   0\n#&gt; 8             max absolute_mcc  0.374871    0.790647 186\n#&gt; 9   max min_per_class_accuracy  0.208112    0.932378 244\n#&gt; 10 max mean_per_class_accuracy  0.185784    0.934433 253\n#&gt; 11                     max tns  0.974785 9494.000000   0\n#&gt; 12                     max fns  0.974785 1259.000000   0\n#&gt; 13                     max fps  0.000437 9494.000000 399\n#&gt; 14                     max tps  0.013144 1260.000000 371\n#&gt; 15                     max tnr  0.974785    1.000000   0\n#&gt; 16                     max fnr  0.974785    0.999206   0\n#&gt; 17                     max fpr  0.000437    1.000000 399\n#&gt; 18                     max tpr  0.013144    1.000000 371\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: gbm\n#&gt; ** Reported on validation data. **\n#&gt; ** Validation metrics **\n#&gt; \n#&gt; MSE:  0.05668655\n#&gt; RMSE:  0.2380894\n#&gt; LogLoss:  0.1895644\n#&gt; Mean Per-Class Error:  0.1909132\n#&gt; AUC:  0.9365065\n#&gt; AUCPR:  0.6903356\n#&gt; Gini:  0.8730131\n#&gt; R^2:  0.4471275\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2976 149 0.047680  =149/3125\n#&gt; Yes     137 273 0.334146   =137/410\n#&gt; Totals 3113 422 0.080905  =286/3535\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.346470    0.656250 180\n#&gt; 2                       max f2  0.116721    0.734368 273\n#&gt; 3                 max f0point5  0.542080    0.714286 124\n#&gt; 4                 max accuracy  0.542080    0.928430 124\n#&gt; 5                max precision  0.960022    1.000000   0\n#&gt; 6                   max recall  0.006156    1.000000 382\n#&gt; 7              max specificity  0.960022    1.000000   0\n#&gt; 8             max absolute_mcc  0.503829    0.614848 134\n#&gt; 9   max min_per_class_accuracy  0.106984    0.860976 277\n#&gt; 10 max mean_per_class_accuracy  0.116721    0.863949 273\n#&gt; 11                     max tns  0.960022 3125.000000   0\n#&gt; 12                     max fns  0.960022  409.000000   0\n#&gt; 13                     max fps  0.000348 3125.000000 399\n#&gt; 14                     max tps  0.006156  410.000000 382\n#&gt; 15                     max tnr  0.960022    1.000000   0\n#&gt; 16                     max fnr  0.960022    0.997561   0\n#&gt; 17                     max fpr  0.000348    1.000000 399\n#&gt; 18                     max tpr  0.006156    1.000000 382\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: gbm\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.05141581\n#&gt; RMSE:  0.2267505\n#&gt; LogLoss:  0.1737003\n#&gt; Mean Per-Class Error:  0.1579033\n#&gt; AUC:  0.9468748\n#&gt; AUCPR:  0.7382088\n#&gt; Gini:  0.8937497\n#&gt; R^2:  0.5029306\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     9035  459 0.048346   =459/9494\n#&gt; Yes     337  923 0.267460   =337/1260\n#&gt; Totals 9372 1382 0.074019  =796/10754\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.337931    0.698713 191\n#&gt; 2                       max f2  0.165725    0.770813 258\n#&gt; 3                 max f0point5  0.525623    0.720339 130\n#&gt; 4                 max accuracy  0.434215    0.930351 160\n#&gt; 5                max precision  0.958378    1.000000   0\n#&gt; 6                   max recall  0.002050    1.000000 394\n#&gt; 7              max specificity  0.958378    1.000000   0\n#&gt; 8             max absolute_mcc  0.337931    0.657535 191\n#&gt; 9   max min_per_class_accuracy  0.129648    0.883084 275\n#&gt; 10 max mean_per_class_accuracy  0.145099    0.884191 267\n#&gt; 11                     max tns  0.958378 9494.000000   0\n#&gt; 12                     max fns  0.958378 1256.000000   0\n#&gt; 13                     max fps  0.000373 9494.000000 399\n#&gt; 14                     max tps  0.002050 1260.000000 394\n#&gt; 15                     max tnr  0.958378    1.000000   0\n#&gt; 16                     max fnr  0.958378    0.996825   0\n#&gt; 17                     max fpr  0.000373    1.000000 399\n#&gt; 18                     max tpr  0.002050    1.000000 394\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                               mean        sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; accuracy                  0.924493  0.009721   0.921432   0.920037   0.940493\n#&gt; auc                       0.946755  0.009559   0.941390   0.955144   0.957281\n#&gt; err                       0.075507  0.009721   0.078568   0.079963   0.059507\n#&gt; err_count               162.400000 20.911718 169.000000 172.000000 128.000000\n#&gt; f0point5                  0.674492  0.053732   0.660112   0.664184   0.765266\n#&gt; f1                        0.702610  0.030636   0.689908   0.713333   0.750973\n#&gt; f2                        0.735250  0.022499   0.722521   0.770338   0.737204\n#&gt; lift_top_group            7.773187  0.370720   7.759740   7.435188   7.379074\n#&gt; logloss                   0.173905  0.006474   0.180278   0.171744   0.164415\n#&gt; max_per_class_error       0.239942  0.037721   0.253968   0.186312   0.271698\n#&gt; mcc                       0.663736  0.033631   0.647620   0.674622   0.717668\n#&gt; mean_per_class_accuracy   0.853186  0.013591   0.845370   0.874270   0.849305\n#&gt; mean_per_class_error      0.146814  0.013591   0.154630   0.125730   0.150695\n#&gt; mse                       0.051535  0.001895   0.052980   0.052051   0.048259\n#&gt; pr_auc                    0.739317  0.033176   0.740486   0.753776   0.785592\n#&gt; precision                 0.657844  0.069232   0.641638   0.635015   0.775100\n#&gt; r2                        0.500633  0.033979   0.487772   0.514989   0.553245\n#&gt; recall                    0.760058  0.037721   0.746032   0.813688   0.728302\n#&gt; rmse                      0.226983  0.004218   0.230173   0.228147   0.219679\n#&gt; specificity               0.946314  0.015390   0.944708   0.934852   0.970307\n#&gt;                         cv_4_valid cv_5_valid\n#&gt; accuracy                  0.914923   0.925581\n#&gt; auc                       0.945627   0.934333\n#&gt; err                       0.085077   0.074419\n#&gt; err_count               183.000000 160.000000\n#&gt; f0point5                  0.621302   0.661597\n#&gt; f1                        0.673797   0.685039\n#&gt; f2                        0.735981   0.710204\n#&gt; lift_top_group            8.113919   8.178015\n#&gt; logloss                   0.173512   0.179574\n#&gt; max_per_class_error       0.215768   0.271967\n#&gt; mcc                       0.634314   0.644457\n#&gt; mean_per_class_accuracy   0.857823   0.839161\n#&gt; mean_per_class_error      0.142177   0.160839\n#&gt; mse                       0.052644   0.051744\n#&gt; pr_auc                    0.700162   0.716568\n#&gt; precision                 0.590625   0.646840\n#&gt; r2                        0.470848   0.476310\n#&gt; recall                    0.784232   0.728034\n#&gt; rmse                      0.229443   0.227472\n#&gt; specificity               0.931414   0.950288\n\nextract_h2o_model_name_by_position &lt;- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name &lt;- h2o_leaderboard %&gt;%\n    as_tibble() %&gt;%\n    slice(n) %&gt;%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\n\n#h2o_models_automl@leaderboard %&gt;% \n # extract_h2o_model_name_by_position(1) %&gt;% \n  #h2o.getModel() %&gt;% \n  #h2o.saveModel(path = \"F:/Sneha/ss23-bdml-SnehaPara/Dataset/h20_models/\")\nstacked_ensemble_h2o &lt;- h2o.loadModel(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/h20_models/StackedEnsemble_AllModels_1_AutoML_1_20240430_135534\")\nstacked_ensemble_h2o\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: stackedensemble\n#&gt; Model ID:  StackedEnsemble_AllModels_1_AutoML_1_20240430_135534 \n#&gt; Model Summary for Stacked Ensemble: \n#&gt;                                     key            value\n#&gt; 1                     Stacking strategy cross_validation\n#&gt; 2  Number of base models (used / total)              5/6\n#&gt; 3      # GBM base models (used / total)              4/4\n#&gt; 4      # DRF base models (used / total)              1/1\n#&gt; 5      # GLM base models (used / total)              0/1\n#&gt; 6                 Metalearner algorithm              GLM\n#&gt; 7    Metalearner fold assignment scheme           Random\n#&gt; 8                    Metalearner nfolds                5\n#&gt; 9               Metalearner fold_column               NA\n#&gt; 10   Custom metalearner hyperparameters             None\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.0313265\n#&gt; RMSE:  0.1769929\n#&gt; LogLoss:  0.1139119\n#&gt; Mean Per-Class Error:  0.09331695\n#&gt; AUC:  0.9841469\n#&gt; AUCPR:  0.9102598\n#&gt; Gini:  0.9682938\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     8665  214 0.024102   =214/8879\n#&gt; Yes     190  979 0.162532   =190/1169\n#&gt; Totals 8855 1193 0.040207  =404/10048\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.404608    0.828959 176\n#&gt; 2                       max f2  0.230730    0.868661 232\n#&gt; 3                 max f0point5  0.583335    0.858201 126\n#&gt; 4                 max accuracy  0.435675    0.960291 167\n#&gt; 5                max precision  0.983444    1.000000   0\n#&gt; 6                   max recall  0.016499    1.000000 362\n#&gt; 7              max specificity  0.983444    1.000000   0\n#&gt; 8             max absolute_mcc  0.404608    0.806234 176\n#&gt; 9   max min_per_class_accuracy  0.203574    0.935843 243\n#&gt; 10 max mean_per_class_accuracy  0.182216    0.938241 252\n#&gt; 11                     max tns  0.983444 8879.000000   0\n#&gt; 12                     max fns  0.983444 1168.000000   0\n#&gt; 13                     max fps  0.000854 8879.000000 399\n#&gt; 14                     max tps  0.016499 1169.000000 362\n#&gt; 15                     max tnr  0.983444    1.000000   0\n#&gt; 16                     max fnr  0.983444    0.999145   0\n#&gt; 17                     max fpr  0.000854    1.000000 399\n#&gt; 18                     max tpr  0.016499    1.000000 362\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on validation data. **\n#&gt; \n#&gt; MSE:  0.05485219\n#&gt; RMSE:  0.2342054\n#&gt; LogLoss:  0.1834731\n#&gt; Mean Per-Class Error:  0.1639063\n#&gt; AUC:  0.9419914\n#&gt; AUCPR:  0.7093631\n#&gt; Gini:  0.8839828\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2939 186 0.059520  =186/3125\n#&gt; Yes     110 300 0.268293   =110/410\n#&gt; Totals 3049 486 0.083734  =296/3535\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.277439    0.669643 203\n#&gt; 2                       max f2  0.121439    0.744772 269\n#&gt; 3                 max f0point5  0.572021    0.708609 116\n#&gt; 4                 max accuracy  0.531953    0.928147 126\n#&gt; 5                max precision  0.980437    1.000000   0\n#&gt; 6                   max recall  0.006723    1.000000 382\n#&gt; 7              max specificity  0.980437    1.000000   0\n#&gt; 8             max absolute_mcc  0.277439    0.625044 203\n#&gt; 9   max min_per_class_accuracy  0.099550    0.867520 281\n#&gt; 10 max mean_per_class_accuracy  0.075422    0.874299 296\n#&gt; 11                     max tns  0.980437 3125.000000   0\n#&gt; 12                     max fns  0.980437  409.000000   0\n#&gt; 13                     max fps  0.000908 3125.000000 399\n#&gt; 14                     max tps  0.006723  410.000000 382\n#&gt; 15                     max tnr  0.980437    1.000000   0\n#&gt; 16                     max fnr  0.980437    0.997561   0\n#&gt; 17                     max fpr  0.000908    1.000000 399\n#&gt; 18                     max tpr  0.006723    1.000000 382\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.05000092\n#&gt; RMSE:  0.2236089\n#&gt; LogLoss:  0.1693625\n#&gt; Mean Per-Class Error:  0.1570889\n#&gt; AUC:  0.94984\n#&gt; AUCPR:  0.7455313\n#&gt; Gini:  0.89968\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     9058  436 0.045924   =436/9494\n#&gt; Yes     338  922 0.268254   =338/1260\n#&gt; Totals 9396 1358 0.071973  =774/10754\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.361554    0.704354 190\n#&gt; 2                       max f2  0.122975    0.773354 281\n#&gt; 3                 max f0point5  0.592881    0.732187 122\n#&gt; 4                 max accuracy  0.458442    0.931746 162\n#&gt; 5                max precision  0.983869    1.000000   0\n#&gt; 6                   max recall  0.002346    1.000000 394\n#&gt; 7              max specificity  0.983869    1.000000   0\n#&gt; 8             max absolute_mcc  0.361554    0.664049 190\n#&gt; 9   max min_per_class_accuracy  0.116410    0.886244 285\n#&gt; 10 max mean_per_class_accuracy  0.119095    0.886636 283\n#&gt; 11                     max tns  0.983869 9494.000000   0\n#&gt; 12                     max fns  0.983869 1257.000000   0\n#&gt; 13                     max fps  0.000607 9494.000000 399\n#&gt; 14                     max tps  0.002346 1260.000000 394\n#&gt; 15                     max tnr  0.983869    1.000000   0\n#&gt; 16                     max fnr  0.983869    0.997619   0\n#&gt; 17                     max fpr  0.000607    1.000000 399\n#&gt; 18                     max tpr  0.002346    1.000000 394\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#&gt; accuracy    0.927896  0.007562   0.933547   0.919551   0.919906   0.931469\n#&gt; auc         0.949934  0.011112   0.962411   0.951630   0.957585   0.934624\n#&gt; err         0.072104  0.007562   0.066453   0.080449   0.080094   0.068531\n#&gt; err_count 155.000000 15.280706 145.000000 172.000000 171.000000 147.000000\n#&gt; f0point5    0.687822  0.031571   0.704648   0.652579   0.659509   0.694330\n#&gt;           cv_5_valid\n#&gt; accuracy    0.935005\n#&gt; auc         0.943419\n#&gt; err         0.064995\n#&gt; err_count 140.000000\n#&gt; f0point5    0.728043\n#&gt; \n#&gt; ---\n#&gt;                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; precision           0.671913  0.046676   0.693727   0.619469   0.626822\n#&gt; r2                  0.516472  0.015431   0.536497   0.514982   0.514549\n#&gt; recall              0.769835  0.059306   0.752000   0.830040   0.833333\n#&gt; residual_deviance 727.905600 33.233692 676.769650 723.366600 724.118100\n#&gt; rmse                0.223589  0.003921   0.216843   0.224951   0.227100\n#&gt; specificity         0.948715  0.015671   0.957039   0.931565   0.931806\n#&gt;                   cv_4_valid cv_5_valid\n#&gt; precision           0.692623   0.726923\n#&gt; r2                  0.493890   0.522443\n#&gt; recall              0.701245   0.732558\n#&gt; residual_deviance 757.956500 757.316960\n#&gt; rmse                0.224666   0.224386\n#&gt; specificity         0.960609   0.962553\n\npredictions &lt;- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(predictions)\n\n#&gt; [1] \"environment\"\n\npredictions_tbl &lt;- predictions %&gt;% as_tibble()\npredictions_tbl"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "# install packages\n# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\nlibrary(tidymodels)\nlibrary(rstanarm)\nlibrary(broom.mixed)\n\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n\n# Modeling ----------------------------------------------------------------\nbike_data_tbl &lt;- readRDS(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/bike_orderlines.rds\")\nbike_data_tbl\n\n\n\n  \n\n\nmodel_sales_tbl &lt;- bike_data_tbl %&gt;%\n  select(total_price, model, category_2, frame_material) %&gt;%\n  \n  group_by(model, category_2, frame_material) %&gt;%\n  summarise(total_sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  \n  arrange(desc(total_sales))\nmodel_sales_tbl %&gt;%\n  mutate(category_2 = as_factor(category_2) %&gt;% \n           fct_reorder(total_sales, .fun = max) %&gt;% \n           fct_rev()) %&gt;%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(title = \"Total Sales for Each Model\",x = \"Frame Material\", y = \"Revenue\")\n\n\n\n\n\n\n\nbike_features_tbl &lt;- readRDS(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/bike_features_tbl.rds\")\nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %&gt;% \n  mutate(`shimano dura-ace`        = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano dura-ace \") %&gt;% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano ultegra \") %&gt;% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano 105 \") %&gt;% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano tiagra \") %&gt;% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano sora\") %&gt;% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore(?! xt)\") %&gt;% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano slx\") %&gt;% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano grx\") %&gt;% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore xt |shimano xt \") %&gt;% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano xtr\") %&gt;% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano saint\") %&gt;% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram red\") %&gt;% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram force\") %&gt;% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram rival\") %&gt;% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram apex\") %&gt;% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram xx1\") %&gt;% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram x01|sram xo1\") %&gt;% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram gx\") %&gt;% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram nx\") %&gt;% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo potenza\") %&gt;% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo super record\") %&gt;% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano nexus\") %&gt;% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano alfine\") %&gt;% as.numeric()\n  ) %&gt;%  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %&gt;% \n  mutate_if(is.numeric, ~replace(., is.na(.), 0)) \nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  mutate(id = row_number()) %&gt;% \n  mutate(frame_material = factor(frame_material)) %&gt;%\n  select(id, everything()) \nbike_features_tbl %&gt;% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj &lt;- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\nsplit_obj %&gt;% training() %&gt;% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %&gt;% testing() %&gt;% distinct(category_2)\n\n\n\n  \n\n\ntrain_tbl &lt;- training(split_obj)\ntest_tbl  &lt;- testing(split_obj)\ntrain_data &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_data  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl), \" |-\", \"_\"))\n#Recipe                                                                               \nbike_recipe &lt;- recipe(frame_material ~ ., data = train_data) %&gt;% \n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors()) \nd &lt;- summary(bike_recipe)\nlr_mod &lt;- logistic_reg() %&gt;% \n  set_engine(\"glm\")\nlr_mod\n\n#&gt; Logistic Regression Model Specification (classification)\n#&gt; \n#&gt; Computational engine: glm\n\nbike_workflow &lt;- workflow() %&gt;% \n  add_model(lr_mod) %&gt;% \n  add_recipe(bike_recipe)\nbike_workflow\n\n#&gt; ══ Workflow ════════════════════════════════════════════════════════════════════\n#&gt; Preprocessor: Recipe\n#&gt; Model: logistic_reg()\n#&gt; \n#&gt; ── Preprocessor ────────────────────────────────────────────────────────────────\n#&gt; 2 Recipe Steps\n#&gt; \n#&gt; • step_dummy()\n#&gt; • step_zv()\n#&gt; \n#&gt; ── Model ───────────────────────────────────────────────────────────────────────\n#&gt; Logistic Regression Model Specification (classification)\n#&gt; \n#&gt; Computational engine: glm\n\nbike_fit &lt;- bike_workflow %&gt;% \n  fit(data = train_data)\nbike_fit\n\n#&gt; ══ Workflow [trained] ══════════════════════════════════════════════════════════\n#&gt; Preprocessor: Recipe\n#&gt; Model: logistic_reg()\n#&gt; \n#&gt; ── Preprocessor ────────────────────────────────────────────────────────────────\n#&gt; 2 Recipe Steps\n#&gt; \n#&gt; • step_dummy()\n#&gt; • step_zv()\n#&gt; \n#&gt; ── Model ───────────────────────────────────────────────────────────────────────\n#&gt; \n#&gt; Call:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt;                (Intercept)                          id  \n#&gt;                  3.832e+01                   6.979e-02  \n#&gt;                     weight                       price  \n#&gt;                 -3.628e+00                   5.876e-04  \n#&gt;           shimano_dura_ace             shimano_ultegra  \n#&gt;                 -3.026e+14                  -3.026e+14  \n#&gt;                shimano_105              shimano_tiagra  \n#&gt;                 -3.026e+14                  -3.026e+14  \n#&gt;              shimano_deore                 shimano_slx  \n#&gt;                  2.873e+00                  -4.676e+01  \n#&gt;                shimano_grx                  Shimano_xt  \n#&gt;                 -3.026e+14                  -2.290e+00  \n#&gt;              Shimano_saint                    SRAM_red  \n#&gt;                 -2.840e+05                  -3.026e+14  \n#&gt;                 SRAM_force                  SRAM_rival  \n#&gt;                 -3.026e+14                  -3.026e+14  \n#&gt;                  SRAM_apex                    SRAM_xx1  \n#&gt;                 -4.806e+15                   4.504e+15  \n#&gt;                   SRAM_x01                     SRAM_gx  \n#&gt;                  1.765e+04                   3.058e+00  \n#&gt;                    SRAM_nx                     SRAM_sx  \n#&gt;                 -4.380e+01                  -2.237e+01  \n#&gt;              shimano_nexus              shimano_alfine  \n#&gt;                 -4.504e+15                  -2.106e+01  \n#&gt;          category_1_Gravel    category_1_Hybrid...City  \n#&gt;                  3.026e+14                  -1.515e+01  \n#&gt;        category_1_Mountain             category_1_Road  \n#&gt;                  1.350e+15                   4.429e+13  \n#&gt;        category_2_All.Road             category_2_City  \n#&gt;                 -2.175e+01                   3.026e+14  \n#&gt;   category_2_Cross.Country       category_2_Cyclocross  \n#&gt;                 -1.047e+15                   2.583e+14  \n#&gt;       category_2_Dirt.Jump         category_2_Downhill  \n#&gt;                 -1.350e+15                  -1.350e+15  \n#&gt;          category_2_E.City        category_2_E.Fitness  \n#&gt;                  5.039e+01                  -2.605e+01  \n#&gt;        category_2_E.Gravel       category_2_E.Mountain  \n#&gt;                  3.026e+14                   5.246e+01  \n#&gt;          category_2_E.Road       category_2_E.Trekking  \n#&gt;                  3.026e+14                          NA  \n#&gt;       category_2_Endurance           category_2_Enduro  \n#&gt;                  2.583e+14                  -1.350e+15  \n#&gt;       category_2_Fat.Bikes             category_2_Race  \n#&gt;                 -1.350e+15                   4.762e+15  \n#&gt;         category_2_Touring            category_2_Trail  \n#&gt;                         NA                          NA  \n#&gt; \n#&gt; ...\n#&gt; and 34 more lines.\n\nbike_fit %&gt;% \n  pull_workflow_fit() %&gt;% \n  tidy()\n\n\n\n  \n\n\nbike_predict &lt;- predict(bike_fit, test_data, type=\"prob\") %&gt;% \n  bind_cols(test_data %&gt;% select(frame_material, category_2)) \nbike_predict %&gt;% \n  roc_curve(truth = frame_material, .pred_aluminium) %&gt;% \n  autoplot()\n\n\n\n\n\n\n\nbike_predict %&gt;% \n  roc_curve(truth = frame_material, .pred_carbon) %&gt;% \n  autoplot()\n\n\n\n\n\n\n\nbike_predict\n\n\n\n  \n\n\nroc_al &lt;- bike_predict %&gt;% \n  roc_auc(truth = frame_material, .pred_aluminium)\nroc_al\n\n\n\n  \n\n\nroc_car &lt;- bike_predict %&gt;% \n  roc_auc(truth = frame_material, .pred_carbon)\nroc_car\n\n\n\n  \n\n\n# Evaluation\nmodel_01_linear_lm_simple &lt;- linear_reg(mode = \"regression\") %&gt;%\n  set_engine(\"lm\") %&gt;%\n  fit(price ~ category_2 + frame_material, data = train_data)\nmodel_01_linear_lm_simple\n\n#&gt; parsnip model object\n#&gt; \n#&gt; \n#&gt; Call:\n#&gt; stats::lm(formula = price ~ category_2 + frame_material, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt;              (Intercept)        category_2All-Road            category_2City  \n#&gt;                   2219.4                    -399.2                   -1356.9  \n#&gt;  category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n#&gt;                    364.0                    -588.9                   -1000.4  \n#&gt;       category_2Downhill          category_2E-City       category_2E-Fitness  \n#&gt;                   1428.0                     848.6                     734.6  \n#&gt;       category_2E-Gravel      category_2E-Mountain          category_2E-Road  \n#&gt;                   1345.0                    1076.1                     699.6  \n#&gt;     category_2E-Trekking       category_2Endurance          category_2Enduro  \n#&gt;                   1015.6                    -370.5                     499.8  \n#&gt;      category_2Fat Bikes            category_2Race         category_2Touring  \n#&gt;                  -1460.0                     480.5                    -952.9  \n#&gt;          category_2Trail  category_2Triathlon Bike      frame_materialcarbon  \n#&gt;                   -383.3                     329.6                    1624.6\n\ntest_data &lt;- test_data %&gt;% filter(category_2 != \"Fat Bikes\")\nyards &lt;- model_01_linear_lm_simple %&gt;%\n  predict(new_data = test_data) %&gt;%\n  bind_cols(test_data %&gt;% select(price)) %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\nyards\n\n\n\n  \n\n\ng1 &lt;- bike_features_tbl %&gt;% \n  mutate(category_2 = as.factor(category_2) %&gt;% \n           fct_reorder(price)) %&gt;% \n  \n  ggplot(aes(category_2, price)) +\n  geom_violin() +\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"#2dc6d6\") +\n  coord_flip() +\n  facet_wrap(~ frame_material) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  labs( title = \"Price for Each Model\", y = \"\", x = \"Category 2\")\ng1\n\n\n\n\n\n\n\nnew_trail &lt;- tibble(\n  model = \"Exceed AL SL new\",\n  category_2 = \"Trail\",\n  frame_material = \"aluminium\",\n  shimano_dura_ace = 0,\n  shimano_ultegra = 0,\n  shimano_105 = 0,\n  shimano_tiagra = 0,\n  Shimano_sora = 0,\n  shimano_deore = 0,\n  shimano_slx = 0,\n  shimano_grx = 0,\n  Shimano_xt = 1,\n  Shimano_xtr = 0,\n  Shimano_saint = 0,\n  SRAM_red = 0,\n  SRAM_force = 0,\n  SRAM_rival = 0,\n  SRAM_apex = 0,\n  SRAM_xx1 = 0,\n  SRAM_x01 = 0,\n  SRAM_gx = 0,\n  SRAM_nx = 0,\n  SRAM_sx = 0,\n  Campagnolo_potenza = 0,\n  Campagnolo_super_record = 0,\n  shimano_nexus = 0,\n  shimano_alfine = 0\n) \nnew_trail\n\n\n\n  \n\n\npredict(model_01_linear_lm_simple, new_data = new_trail)\n\n\n\n  \n\n\nmodels_tbl &lt;- tibble(\n  model_id = str_c(\"Model 0\", 1:1),\n  model = list(\n    model_01_linear_lm_simple\n  )\n)\nmodels_tbl\n\n\n\n  \n\n\npredictions_new_trail &lt;- models_tbl %&gt;%\n  mutate(predictions = map(model, predict, new_data = new_trail)) %&gt;%\n  unnest(predictions) %&gt;%\n  mutate(category_2 = \"Trail\") %&gt;%\n  left_join(new_trail, by = \"category_2\")\npredictions_new_trail\n\n\n\n  \n\n\ng2 &lt;- g1 +\n  geom_point(aes(y = .pred), color = \"red\", alpha = 0.5,\n             data = predictions_new_trail) +\n  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),\n                           size = 5,\n                           data = predictions_new_trail)\ng2"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/02_Supervised_ML.html",
    "href": "content/01_journal/02_Supervised_ML.html",
    "title": "Supervised ML",
    "section": "",
    "text": "# install packages\n# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\nlibrary(tidymodels)\nlibrary(rstanarm)\nlibrary(broom.mixed)\n\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n\n# Modeling ----------------------------------------------------------------\nbike_data_tbl &lt;- readRDS(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/bike_orderlines.rds\")\nbike_data_tbl\n\n\n\n  \n\n\nmodel_sales_tbl &lt;- bike_data_tbl %&gt;%\n  select(total_price, model, category_2, frame_material) %&gt;%\n  \n  group_by(model, category_2, frame_material) %&gt;%\n  summarise(total_sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  \n  arrange(desc(total_sales))\n\n#&gt; `summarise()` has grouped output by 'model', 'category_2'. You can override\n#&gt; using the `.groups` argument.\n\nmodel_sales_tbl %&gt;%\n  mutate(category_2 = as_factor(category_2) %&gt;% \n           fct_reorder(total_sales, .fun = max) %&gt;% \n           fct_rev()) %&gt;%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(title = \"Total Sales for Each Model\",x = \"Frame Material\", y = \"Revenue\")\n\n#&gt; Registered S3 method overwritten by 'quantmod':\n#&gt;   method            from\n#&gt;   as.zoo.data.frame zoo\n\n\n#&gt; Warning: Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n\n\n#&gt; Warning in max(data$density, na.rm = TRUE): no non-missing arguments to max;\n#&gt; returning -Inf\n\n\n#&gt; Warning: Computation failed in `stat_ydensity()`.\n#&gt; Caused by error in `$&lt;-.data.frame`:\n#&gt; ! replacement has 1 row, data has 0\n\n\n\n\n\n\n\n\nbike_features_tbl &lt;- readRDS(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/bike_features_tbl.rds\")\nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %&gt;% \n  mutate(`shimano dura-ace`        = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano dura-ace \") %&gt;% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano ultegra \") %&gt;% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano 105 \") %&gt;% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano tiagra \") %&gt;% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano sora\") %&gt;% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore(?! xt)\") %&gt;% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano slx\") %&gt;% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano grx\") %&gt;% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore xt |shimano xt \") %&gt;% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano xtr\") %&gt;% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano saint\") %&gt;% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram red\") %&gt;% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram force\") %&gt;% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram rival\") %&gt;% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram apex\") %&gt;% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram xx1\") %&gt;% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram x01|sram xo1\") %&gt;% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram gx\") %&gt;% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram nx\") %&gt;% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo potenza\") %&gt;% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo super record\") %&gt;% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano nexus\") %&gt;% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano alfine\") %&gt;% as.numeric()\n  ) %&gt;%  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %&gt;% \n  mutate_if(is.numeric, ~replace(., is.na(.), 0)) \nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  mutate(id = row_number()) %&gt;% \n  mutate(frame_material = factor(frame_material)) %&gt;%\n  select(id, everything()) \nbike_features_tbl %&gt;% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj &lt;- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\nsplit_obj %&gt;% training() %&gt;% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %&gt;% testing() %&gt;% distinct(category_2)\n\n\n\n  \n\n\ntrain_tbl &lt;- training(split_obj)\ntest_tbl  &lt;- testing(split_obj)\ntrain_data &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_data  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl), \" |-\", \"_\"))\n#Recipe                                                                               \nbike_recipe &lt;- recipe(frame_material ~ ., data = train_data) %&gt;% \n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors()) \nd &lt;- summary(bike_recipe)\nlr_mod &lt;- logistic_reg() %&gt;% \n  set_engine(\"glm\")\nlr_mod\n\n#&gt; Logistic Regression Model Specification (classification)\n#&gt; \n#&gt; Computational engine: glm\n\nbike_workflow &lt;- workflow() %&gt;% \n  add_model(lr_mod) %&gt;% \n  add_recipe(bike_recipe)\nbike_workflow\n\n#&gt; ══ Workflow ════════════════════════════════════════════════════════════════════\n#&gt; Preprocessor: Recipe\n#&gt; Model: logistic_reg()\n#&gt; \n#&gt; ── Preprocessor ────────────────────────────────────────────────────────────────\n#&gt; 2 Recipe Steps\n#&gt; \n#&gt; • step_dummy()\n#&gt; • step_zv()\n#&gt; \n#&gt; ── Model ───────────────────────────────────────────────────────────────────────\n#&gt; Logistic Regression Model Specification (classification)\n#&gt; \n#&gt; Computational engine: glm\n\nbike_fit &lt;- bike_workflow %&gt;% \n  fit(data = train_data)\n\n#&gt; Warning: glm.fit: algorithm did not converge\n\n\n#&gt; Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nbike_fit\n\n#&gt; ══ Workflow [trained] ══════════════════════════════════════════════════════════\n#&gt; Preprocessor: Recipe\n#&gt; Model: logistic_reg()\n#&gt; \n#&gt; ── Preprocessor ────────────────────────────────────────────────────────────────\n#&gt; 2 Recipe Steps\n#&gt; \n#&gt; • step_dummy()\n#&gt; • step_zv()\n#&gt; \n#&gt; ── Model ───────────────────────────────────────────────────────────────────────\n#&gt; \n#&gt; Call:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt;                (Intercept)                          id  \n#&gt;                 -7.353e+15                   7.183e+13  \n#&gt;                     weight                       price  \n#&gt;                 -5.655e+14                   6.204e+11  \n#&gt;           shimano_dura_ace             shimano_ultegra  \n#&gt;                 -2.344e+14                   6.871e+14  \n#&gt;                shimano_105              shimano_tiagra  \n#&gt;                  3.642e+14                  -3.359e+15  \n#&gt;              shimano_deore                 shimano_slx  \n#&gt;                  4.244e+15                  -3.136e+15  \n#&gt;                shimano_grx                  Shimano_xt  \n#&gt;                  1.087e+15                   2.944e+14  \n#&gt;              Shimano_saint                    SRAM_red  \n#&gt;                  4.697e+15                   4.054e+14  \n#&gt;                 SRAM_force                  SRAM_rival  \n#&gt;                  2.394e+15                   5.344e+14  \n#&gt;                  SRAM_apex                    SRAM_xx1  \n#&gt;                 -7.954e+14                   6.651e+14  \n#&gt;                   SRAM_x01                     SRAM_gx  \n#&gt;                  3.404e+14                   1.223e+15  \n#&gt;                    SRAM_nx                     SRAM_sx  \n#&gt;                  1.008e+15                  -1.919e+15  \n#&gt;    Campagnolo_super_record               shimano_nexus  \n#&gt;                 -4.127e+15                   6.665e+14  \n#&gt;             shimano_alfine           category_1_Gravel  \n#&gt;                 -3.946e+15                   1.796e+14  \n#&gt;   category_1_Hybrid...City         category_1_Mountain  \n#&gt;                 -7.030e+15                   1.164e+15  \n#&gt;            category_1_Road         category_2_All.Road  \n#&gt;                  1.001e+16                   1.832e+15  \n#&gt;            category_2_City    category_2_Cross.Country  \n#&gt;                  1.732e+15                   3.071e+15  \n#&gt;      category_2_Cyclocross        category_2_Dirt.Jump  \n#&gt;                 -2.700e+15                  -5.107e+15  \n#&gt;        category_2_Downhill           category_2_E.City  \n#&gt;                 -3.169e+15                   4.221e+15  \n#&gt;       category_2_E.Fitness         category_2_E.Gravel  \n#&gt;                 -4.667e+15                   8.031e+15  \n#&gt;      category_2_E.Mountain           category_2_E.Road  \n#&gt;                  6.551e+15                   5.967e+15  \n#&gt;      category_2_E.Trekking        category_2_Endurance  \n#&gt;                         NA                  -8.231e+14  \n#&gt;          category_2_Enduro        category_2_Fat.Bikes  \n#&gt;                 -1.037e+15                   7.783e+15  \n#&gt;            category_2_Race          category_2_Touring  \n#&gt;                 -1.126e+14                          NA  \n#&gt; \n#&gt; ...\n#&gt; and 34 more lines.\n\nbike_fit %&gt;% \n  pull_workflow_fit() %&gt;% \n  tidy()\n\n#&gt; Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\n#&gt; ℹ Please use `extract_fit_parsnip()` instead.\n\n\n\n\n  \n\n\nbike_predict &lt;- predict(bike_fit, test_data, type=\"prob\") %&gt;% \n  bind_cols(test_data %&gt;% select(frame_material, category_2)) \n\n#&gt; Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\n#&gt; prediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n\nbike_predict %&gt;% \n  roc_curve(truth = frame_material, .pred_aluminium) %&gt;% \n  autoplot()\n\n\n\n\n\n\n\nbike_predict %&gt;% \n  roc_curve(truth = frame_material, .pred_carbon) %&gt;% \n  autoplot()\n\n\n\n\n\n\n\nbike_predict\n\n\n\n  \n\n\nroc_al &lt;- bike_predict %&gt;% \n  roc_auc(truth = frame_material, .pred_aluminium)\nroc_al\n\n\n\n  \n\n\nroc_car &lt;- bike_predict %&gt;% \n  roc_auc(truth = frame_material, .pred_carbon)\nroc_car\n\n\n\n  \n\n\n# Evaluation\nmodel_01_linear_lm_simple &lt;- linear_reg(mode = \"regression\") %&gt;%\n  set_engine(\"lm\") %&gt;%\n  fit(price ~ category_2 + frame_material, data = train_data)\nmodel_01_linear_lm_simple\n\n#&gt; parsnip model object\n#&gt; \n#&gt; \n#&gt; Call:\n#&gt; stats::lm(formula = price ~ category_2 + frame_material, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt;              (Intercept)        category_2All-Road            category_2City  \n#&gt;                   2366.5                    -550.2                   -1446.5  \n#&gt;  category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n#&gt;                    107.8                    -613.9                   -1100.8  \n#&gt;       category_2Downhill          category_2E-City       category_2E-Fitness  \n#&gt;                    353.8                     820.0                     392.5  \n#&gt;       category_2E-Gravel      category_2E-Mountain          category_2E-Road  \n#&gt;                   1345.0                     986.5                     552.5  \n#&gt;     category_2E-Trekking       category_2Endurance          category_2Enduro  \n#&gt;                    748.5                   -1250.3                     574.3  \n#&gt;      category_2Fat Bikes            category_2Race         category_2Touring  \n#&gt;                  -1460.0                     642.9                   -1195.0  \n#&gt;          category_2Trail  category_2Triathlon Bike      frame_materialcarbon  \n#&gt;                   -430.0                     254.3                    1477.5\n\ntest_data &lt;- test_data %&gt;% filter(category_2 != \"Fat Bikes\")\nyards &lt;- model_01_linear_lm_simple %&gt;%\n  predict(new_data = test_data) %&gt;%\n  bind_cols(test_data %&gt;% select(price)) %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\nyards\n\n\n\n  \n\n\ng1 &lt;- bike_features_tbl %&gt;% \n  mutate(category_2 = as.factor(category_2) %&gt;% \n           fct_reorder(price)) %&gt;% \n  \n  ggplot(aes(category_2, price)) +\n  geom_violin() +\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"#2dc6d6\") +\n  coord_flip() +\n  facet_wrap(~ frame_material) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  labs( title = \"Price for Each Model\", y = \"\", x = \"Category 2\")\ng1\n\n#&gt; Warning: Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n\n\n#&gt; Warning: Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n\n\n\n\n\n\n\n\nnew_trail &lt;- tibble(\n  model = \"Exceed AL SL new\",\n  category_2 = \"Trail\",\n  frame_material = \"aluminium\",\n  shimano_dura_ace = 0,\n  shimano_ultegra = 0,\n  shimano_105 = 0,\n  shimano_tiagra = 0,\n  Shimano_sora = 0,\n  shimano_deore = 0,\n  shimano_slx = 0,\n  shimano_grx = 0,\n  Shimano_xt = 1,\n  Shimano_xtr = 0,\n  Shimano_saint = 0,\n  SRAM_red = 0,\n  SRAM_force = 0,\n  SRAM_rival = 0,\n  SRAM_apex = 0,\n  SRAM_xx1 = 0,\n  SRAM_x01 = 0,\n  SRAM_gx = 0,\n  SRAM_nx = 0,\n  SRAM_sx = 0,\n  Campagnolo_potenza = 0,\n  Campagnolo_super_record = 0,\n  shimano_nexus = 0,\n  shimano_alfine = 0\n) \nnew_trail\n\n\n\n  \n\n\npredict(model_01_linear_lm_simple, new_data = new_trail)\n\n\n\n  \n\n\nmodels_tbl &lt;- tibble(\n  model_id = str_c(\"Model 0\", 1:1),\n  model = list(\n    model_01_linear_lm_simple\n  )\n)\nmodels_tbl\n\n\n\n  \n\n\npredictions_new_trail &lt;- models_tbl %&gt;%\n  mutate(predictions = map(model, predict, new_data = new_trail)) %&gt;%\n  unnest(predictions) %&gt;%\n  mutate(category_2 = \"Trail\") %&gt;%\n  left_join(new_trail, by = \"category_2\")\npredictions_new_trail\n\n\n\n  \n\n\ng2 &lt;- g1 +\n  geom_point(aes(y = .pred), color = \"red\", alpha = 0.5,\n             data = predictions_new_trail) +\n  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),\n                           size = 5,\n                           data = predictions_new_trail)\ng2\n\n#&gt; Warning: Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes."
  },
  {
    "objectID": "content/01_journal/01_ML_Fundamentals.html",
    "href": "content/01_journal/01_ML_Fundamentals.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "# Import libraries\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#&gt; Loading required package: PerformanceAnalytics\n#&gt; Loading required package: xts\n#&gt; Loading required package: zoo\n#&gt; \n#&gt; Attaching package: 'zoo'\n#&gt; \n#&gt; The following objects are masked from 'package:base':\n#&gt; \n#&gt;     as.Date, as.Date.numeric\n#&gt; \n#&gt; \n#&gt; ######################### Warning from 'xts' package ##########################\n#&gt; #                                                                             #\n#&gt; # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#&gt; # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#&gt; # source() into this session won't work correctly.                            #\n#&gt; #                                                                             #\n#&gt; # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#&gt; # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#&gt; # dplyr from breaking base R's lag() function.                                #\n#&gt; #                                                                             #\n#&gt; # Code in packages is not affected. It's protected by R's namespace mechanism #\n#&gt; # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#&gt; #                                                                             #\n#&gt; ###############################################################################\n#&gt; \n#&gt; Attaching package: 'xts'\n#&gt; \n#&gt; The following objects are masked from 'package:dplyr':\n#&gt; \n#&gt;     first, last\n#&gt; \n#&gt; \n#&gt; Attaching package: 'PerformanceAnalytics'\n#&gt; \n#&gt; The following object is masked from 'package:graphics':\n#&gt; \n#&gt;     legend\n#&gt; \n#&gt; Loading required package: quantmod\n#&gt; Loading required package: TTR\n#&gt; Registered S3 method overwritten by 'quantmod':\n#&gt;   method            from\n#&gt;   as.zoo.data.frame zoo\n\nlibrary(broom)\nlibrary(umap)"
  },
  {
    "objectID": "content/01_journal/01_ML_Fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_ML_Fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Machine Learning Fundamentals",
    "section": "2.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "2.1 Step 1 - Convert stock prices to a standardized format (daily returns)\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\n\n# Apply your data transformation skills!\n\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;% \n    select(symbol, date, adjusted) %&gt;%          \n    filter(date &gt;= \"2018-01-01\") %&gt;%            \n    group_by(symbol) %&gt;% \n    mutate(adj_lag = lag(adjusted)) %&gt;% \n    filter(!is.na(adj_lag)) %&gt;% \n    mutate(diff = adjusted - adj_lag,\n           pct_return = diff / adj_lag) %&gt;% \n    select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/01_ML_Fundamentals.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/01_ML_Fundamentals.html#step-2---convert-to-user-item-format",
    "title": "Machine Learning Fundamentals",
    "section": "2.2 Step 2 - Convert to User-Item Format",
    "text": "2.2 Step 2 - Convert to User-Item Format\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;% \n    pivot_wider(names_from = date,\n                values_from = pct_return,\n                values_fill = list(pct_return = 0))\nstock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01_ML_Fundamentals.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/01_ML_Fundamentals.html#step-3---perform-k-means-clustering",
    "title": "Machine Learning Fundamentals",
    "section": "2.3 Step 3 - Perform K-Means Clustering",
    "text": "2.3 Step 3 - Perform K-Means Clustering\n\n# Create kmeans_obj for 4 centers\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;% \n    select(-symbol) %&gt;% \n    kmeans(centers = 4, nstart = 20)\nkmeans_obj %&gt;% glance()\n\n\n\n  \n\n\n\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "content/01_journal/01_ML_Fundamentals.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/01_ML_Fundamentals.html#step-4---find-the-optimal-value-of-k",
    "title": "Machine Learning Fundamentals",
    "section": "2.4 Step 4 - Find the optimal value of K",
    "text": "2.4 Step 4 - Find the optimal value of K\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\n\n# Use purrr to map\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;% \n    mutate(k_means = centers %&gt;% map(kmeans_mapper),\n           glance = k_means %&gt;% map(glance))\n\n\nk_means_mapped_tbl \n\n\n\n  \n\n\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %&gt;% \n    unnest(glance) %&gt;% \n    ggplot(aes(x = centers, y = tot.withinss)) +\n    geom_point() +\n    geom_line()"
  },
  {
    "objectID": "content/01_journal/01_ML_Fundamentals.html#step-5---apply-umap",
    "href": "content/01_journal/01_ML_Fundamentals.html#step-5---apply-umap",
    "title": "Machine Learning Fundamentals",
    "section": "2.5 Step 5 - Apply UMAP",
    "text": "2.5 Step 5 - Apply UMAP\n\nk_means_mapped_tbl &lt;- read_rds(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/k_means_mapped_tbl.rds\")\n\n\n# Apply UMAP\numap_results &lt;- stock_date_matrix_tbl %&gt;% \n    select(-symbol) %&gt;% \n    umap() \numap_results \n\n#&gt; umap embedding of 502 items in 2 dimensions\n#&gt; object components: layout, data, knn, config\n\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;%\n    as_tibble() %&gt;%\n    bind_cols(stock_date_matrix_tbl %&gt;% select(symbol))\n\n#&gt; Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#&gt; `.name_repair` is omitted as of tibble 2.0.0.\n#&gt; ℹ Using compatibility `.name_repair`.\n\n umap_results_tbl\n\n\n\n  \n\n\n\n\n# Visualize UMAP results\numap_results_tbl %&gt;% \n    ggplot(aes(V1, V2)) +\n    geom_point(alpha = 0.5) +\n    theme_tq() +\n    labs(title = \"UMAP Projection\")"
  },
  {
    "objectID": "content/01_journal/01_ML_Fundamentals.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/01_ML_Fundamentals.html#step-6---combine-k-means-and-umap",
    "title": "Machine Learning Fundamentals",
    "section": "2.6 Step 6 - Combine K-Means and UMAP",
    "text": "2.6 Step 6 - Combine K-Means and UMAP\n\nk_means_mapped_tbl &lt;- read_rds(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/umap_results_tbl.rds\")\n\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;% \n    filter(centers == 10) %&gt;% \n    pull(k_means) %&gt;% \n    pluck(1)\n\n# Store as k_means_obj\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl &lt;- k_means_obj %&gt;%\n    augment(stock_date_matrix_tbl) %&gt;%\n    select(symbol, .cluster) %&gt;%\n    left_join(umap_results_tbl,\n              by = \"symbol\") %&gt;%\n    left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector),\n              by = \"symbol\")\n umap_kmeans_results_tbl \n\n\n\n  \n\n\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %&gt;% \n    ggplot(aes(V1, V2, color = .cluster)) +\n    geom_point(alpha = 0.5) +\n    theme_tq() +\n    scale_color_tq()"
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "Dataset/Chapter_1_Challenge.html",
    "href": "Dataset/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "Dataset/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "Dataset/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "Dataset/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "Dataset/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "Dataset/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "Dataset/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "Dataset/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "Dataset/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "Dataset/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "Dataset/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "Dataset/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "Dataset/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/04_Performance_Measures.html",
    "href": "content/01_journal/04_Performance_Measures.html",
    "title": "Performance Measures",
    "section": "",
    "text": "library(tidymodels)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(rstanarm)\nlibrary(broom.mixed)\nlibrary(h2o)\nproduct_backorders_tbl &lt;- read.table(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/product_backorders.txt\",header = TRUE, sep = \",\" )\nproduct_backorders_tbl %&gt;% glimpse()\n\n#&gt; Rows: 19,053\n#&gt; Columns: 23\n#&gt; $ sku               &lt;int&gt; 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#&gt; $ national_inv      &lt;int&gt; 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#&gt; $ lead_time         &lt;int&gt; 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#&gt; $ in_transit_qty    &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#&gt; $ forecast_3_month  &lt;int&gt; 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#&gt; $ forecast_6_month  &lt;int&gt; 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#&gt; $ forecast_9_month  &lt;int&gt; 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#&gt; $ sales_1_month     &lt;int&gt; 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#&gt; $ sales_3_month     &lt;int&gt; 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#&gt; $ sales_6_month     &lt;int&gt; 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#&gt; $ sales_9_month     &lt;int&gt; 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#&gt; $ min_bank          &lt;int&gt; 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#&gt; $ potential_issue   &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ pieces_past_due   &lt;int&gt; 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#&gt; $ perf_6_month_avg  &lt;dbl&gt; 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#&gt; $ perf_12_month_avg &lt;dbl&gt; 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#&gt; $ local_bo_qty      &lt;int&gt; 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ deck_risk         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ oe_constraint     &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ ppap_risk         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#&gt; $ stop_auto_buy     &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#&gt; $ rev_stop          &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ went_on_backorder &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n\n\ndata_split &lt;- initial_split(product_backorders_tbl, prop = 3/4)\n# Assign training and test data\ntrain_data &lt;- training(data_split)\ntest_data  &lt;- testing(data_split)\n# Specifying of the response and the predictor variables\nfactor_names &lt;- c(\"went_on_backorder\")\nproduct_rec &lt;- \n  recipe(went_on_backorder ~ ., data = train_data) %&gt;%  \n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  step_mutate_at(factor_names, fn = as.factor) %&gt;%\n  prep()\n\n#&gt; Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\n#&gt; ℹ Please use `all_of()` or `any_of()` instead.\n#&gt;   # Was:\n#&gt;   data %&gt;% select(factor_names)\n#&gt; \n#&gt;   # Now:\n#&gt;   data %&gt;% select(all_of(factor_names))\n#&gt; \n#&gt; See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\nd &lt;- summary(product_rec)\ntrain_tbl &lt;- bake(product_rec, new_data = train_data)\ntest_tbl  &lt;- bake(product_rec, new_data = test_data)\n\n\nh2o.init()\n\n#&gt; \n#&gt; H2O is not running yet, starting it now...\n#&gt; \n#&gt; Note:  In case of errors look at the following log files:\n#&gt;     C:\\Users\\gurur\\AppData\\Local\\Temp\\RtmpIxzEDH\\filebd868f82aaf/h2o_gurur_started_from_r.out\n#&gt;     C:\\Users\\gurur\\AppData\\Local\\Temp\\RtmpIxzEDH\\filebd85d74a99/h2o_gurur_started_from_r.err\n#&gt; \n#&gt; \n#&gt; Starting H2O JVM and connecting:  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         4 seconds 128 milliseconds \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.44.0.3 \n#&gt;     H2O cluster version age:    4 months and 10 days \n#&gt;     H2O cluster name:           H2O_started_from_R_gurur_qkb590 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   3.95 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.4.0 (2024-04-24 ucrt)\n\n\n#&gt; Warning in h2o.clusterInfo(): \n#&gt; Your H2O cluster version is (4 months and 10 days) old. There may be a newer version available.\n#&gt; Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n# Splitting the data for validation df\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.75), seed = 1234)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Predictors\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\n\n# AutoML Model\nh2o_models_automl &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=======                                                               |  10%\n#&gt; 20:02:18.258: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#&gt; 20:02:18.419: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |===============================================================       |  89%\n  |                                                                            \n  |======================================================================|  99%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(h2o_models_automl)\n\n#&gt; [1] \"S4\"\n\nslotNames(h2o_models_automl)\n\n#&gt; [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#&gt; [5] \"modeling_steps\" \"training_info\"\n\nh2o_models_automl@leaderboard \n\n#&gt;                                                  model_id       auc   logloss\n#&gt; 1    StackedEnsemble_AllModels_1_AutoML_1_20240430_200218 0.9513826 0.1718137\n#&gt; 2                          GBM_4_AutoML_1_20240430_200218 0.9493486 0.1797660\n#&gt; 3 StackedEnsemble_BestOfFamily_2_AutoML_1_20240430_200218 0.9489709 0.1764564\n#&gt; 4                          GBM_3_AutoML_1_20240430_200218 0.9483250 0.1804599\n#&gt; 5 StackedEnsemble_BestOfFamily_1_AutoML_1_20240430_200218 0.9474314 0.1770544\n#&gt; 6                          GBM_1_AutoML_1_20240430_200218 0.9474312 0.1785849\n#&gt;       aucpr mean_per_class_error      rmse        mse\n#&gt; 1 0.7583406            0.1504695 0.2265027 0.05130348\n#&gt; 2 0.7469807            0.1498799 0.2304365 0.05310100\n#&gt; 3 0.7462449            0.1503946 0.2293296 0.05259207\n#&gt; 4 0.7494913            0.1294728 0.2302442 0.05301241\n#&gt; 5 0.7436459            0.1444125 0.2301628 0.05297490\n#&gt; 6 0.7436471            0.1444125 0.2310021 0.05336195\n#&gt; \n#&gt; [12 rows x 7 columns]\n\n#h2o_models_automl@leader\n\n\n#h2o.getModel(\"GBM_1_AutoML_1_20240430_135534\") %&gt;% \n # h2o.saveModel(path = \"F:/Sneha/ss23-bdml-SnehaPara/Dataset/h20_models/\")\nh2o.loadModel(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/h20_models/GBM_1_AutoML_1_20240430_135534\")\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: gbm\n#&gt; Model ID:  GBM_1_AutoML_1_20240430_135534 \n#&gt; Model Summary: \n#&gt;   number_of_trees number_of_internal_trees model_size_in_bytes min_depth\n#&gt; 1              97                       97               76594         9\n#&gt;   max_depth mean_depth min_leaves max_leaves mean_leaves\n#&gt; 1        15   14.27835         16         68    57.95876\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: gbm\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.03498635\n#&gt; RMSE:  0.1870464\n#&gt; LogLoss:  0.1239342\n#&gt; Mean Per-Class Error:  0.09665386\n#&gt; AUC:  0.9811421\n#&gt; AUCPR:  0.8902228\n#&gt; Gini:  0.9622843\n#&gt; R^2:  0.6617647\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     9226  268 0.028228   =268/9494\n#&gt; Yes     208 1052 0.165079   =208/1260\n#&gt; Totals 9434 1320 0.044263  =476/10754\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.374871    0.815504 186\n#&gt; 2                       max f2  0.218325    0.858882 240\n#&gt; 3                 max f0point5  0.551949    0.840016 128\n#&gt; 4                 max accuracy  0.442773    0.956853 164\n#&gt; 5                max precision  0.974785    1.000000   0\n#&gt; 6                   max recall  0.013144    1.000000 371\n#&gt; 7              max specificity  0.974785    1.000000   0\n#&gt; 8             max absolute_mcc  0.374871    0.790647 186\n#&gt; 9   max min_per_class_accuracy  0.208112    0.932378 244\n#&gt; 10 max mean_per_class_accuracy  0.185784    0.934433 253\n#&gt; 11                     max tns  0.974785 9494.000000   0\n#&gt; 12                     max fns  0.974785 1259.000000   0\n#&gt; 13                     max fps  0.000437 9494.000000 399\n#&gt; 14                     max tps  0.013144 1260.000000 371\n#&gt; 15                     max tnr  0.974785    1.000000   0\n#&gt; 16                     max fnr  0.974785    0.999206   0\n#&gt; 17                     max fpr  0.000437    1.000000 399\n#&gt; 18                     max tpr  0.013144    1.000000 371\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: gbm\n#&gt; ** Reported on validation data. **\n#&gt; ** Validation metrics **\n#&gt; \n#&gt; MSE:  0.05668655\n#&gt; RMSE:  0.2380894\n#&gt; LogLoss:  0.1895644\n#&gt; Mean Per-Class Error:  0.1909132\n#&gt; AUC:  0.9365065\n#&gt; AUCPR:  0.6903356\n#&gt; Gini:  0.8730131\n#&gt; R^2:  0.4471275\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2976 149 0.047680  =149/3125\n#&gt; Yes     137 273 0.334146   =137/410\n#&gt; Totals 3113 422 0.080905  =286/3535\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.346470    0.656250 180\n#&gt; 2                       max f2  0.116721    0.734368 273\n#&gt; 3                 max f0point5  0.542080    0.714286 124\n#&gt; 4                 max accuracy  0.542080    0.928430 124\n#&gt; 5                max precision  0.960022    1.000000   0\n#&gt; 6                   max recall  0.006156    1.000000 382\n#&gt; 7              max specificity  0.960022    1.000000   0\n#&gt; 8             max absolute_mcc  0.503829    0.614848 134\n#&gt; 9   max min_per_class_accuracy  0.106984    0.860976 277\n#&gt; 10 max mean_per_class_accuracy  0.116721    0.863949 273\n#&gt; 11                     max tns  0.960022 3125.000000   0\n#&gt; 12                     max fns  0.960022  409.000000   0\n#&gt; 13                     max fps  0.000348 3125.000000 399\n#&gt; 14                     max tps  0.006156  410.000000 382\n#&gt; 15                     max tnr  0.960022    1.000000   0\n#&gt; 16                     max fnr  0.960022    0.997561   0\n#&gt; 17                     max fpr  0.000348    1.000000 399\n#&gt; 18                     max tpr  0.006156    1.000000 382\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: gbm\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.05141581\n#&gt; RMSE:  0.2267505\n#&gt; LogLoss:  0.1737003\n#&gt; Mean Per-Class Error:  0.1579033\n#&gt; AUC:  0.9468748\n#&gt; AUCPR:  0.7382088\n#&gt; Gini:  0.8937497\n#&gt; R^2:  0.5029306\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     9035  459 0.048346   =459/9494\n#&gt; Yes     337  923 0.267460   =337/1260\n#&gt; Totals 9372 1382 0.074019  =796/10754\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.337931    0.698713 191\n#&gt; 2                       max f2  0.165725    0.770813 258\n#&gt; 3                 max f0point5  0.525623    0.720339 130\n#&gt; 4                 max accuracy  0.434215    0.930351 160\n#&gt; 5                max precision  0.958378    1.000000   0\n#&gt; 6                   max recall  0.002050    1.000000 394\n#&gt; 7              max specificity  0.958378    1.000000   0\n#&gt; 8             max absolute_mcc  0.337931    0.657535 191\n#&gt; 9   max min_per_class_accuracy  0.129648    0.883084 275\n#&gt; 10 max mean_per_class_accuracy  0.145099    0.884191 267\n#&gt; 11                     max tns  0.958378 9494.000000   0\n#&gt; 12                     max fns  0.958378 1256.000000   0\n#&gt; 13                     max fps  0.000373 9494.000000 399\n#&gt; 14                     max tps  0.002050 1260.000000 394\n#&gt; 15                     max tnr  0.958378    1.000000   0\n#&gt; 16                     max fnr  0.958378    0.996825   0\n#&gt; 17                     max fpr  0.000373    1.000000 399\n#&gt; 18                     max tpr  0.002050    1.000000 394\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                               mean        sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; accuracy                  0.924493  0.009721   0.921432   0.920037   0.940493\n#&gt; auc                       0.946755  0.009559   0.941390   0.955144   0.957281\n#&gt; err                       0.075507  0.009721   0.078568   0.079963   0.059507\n#&gt; err_count               162.400000 20.911718 169.000000 172.000000 128.000000\n#&gt; f0point5                  0.674492  0.053732   0.660112   0.664184   0.765266\n#&gt; f1                        0.702610  0.030636   0.689908   0.713333   0.750973\n#&gt; f2                        0.735250  0.022499   0.722521   0.770338   0.737204\n#&gt; lift_top_group            7.773187  0.370720   7.759740   7.435188   7.379074\n#&gt; logloss                   0.173905  0.006474   0.180278   0.171744   0.164415\n#&gt; max_per_class_error       0.239942  0.037721   0.253968   0.186312   0.271698\n#&gt; mcc                       0.663736  0.033631   0.647620   0.674622   0.717668\n#&gt; mean_per_class_accuracy   0.853186  0.013591   0.845370   0.874270   0.849305\n#&gt; mean_per_class_error      0.146814  0.013591   0.154630   0.125730   0.150695\n#&gt; mse                       0.051535  0.001895   0.052980   0.052051   0.048259\n#&gt; pr_auc                    0.739317  0.033176   0.740486   0.753776   0.785592\n#&gt; precision                 0.657844  0.069232   0.641638   0.635015   0.775100\n#&gt; r2                        0.500633  0.033979   0.487772   0.514989   0.553245\n#&gt; recall                    0.760058  0.037721   0.746032   0.813688   0.728302\n#&gt; rmse                      0.226983  0.004218   0.230173   0.228147   0.219679\n#&gt; specificity               0.946314  0.015390   0.944708   0.934852   0.970307\n#&gt;                         cv_4_valid cv_5_valid\n#&gt; accuracy                  0.914923   0.925581\n#&gt; auc                       0.945627   0.934333\n#&gt; err                       0.085077   0.074419\n#&gt; err_count               183.000000 160.000000\n#&gt; f0point5                  0.621302   0.661597\n#&gt; f1                        0.673797   0.685039\n#&gt; f2                        0.735981   0.710204\n#&gt; lift_top_group            8.113919   8.178015\n#&gt; logloss                   0.173512   0.179574\n#&gt; max_per_class_error       0.215768   0.271967\n#&gt; mcc                       0.634314   0.644457\n#&gt; mean_per_class_accuracy   0.857823   0.839161\n#&gt; mean_per_class_error      0.142177   0.160839\n#&gt; mse                       0.052644   0.051744\n#&gt; pr_auc                    0.700162   0.716568\n#&gt; precision                 0.590625   0.646840\n#&gt; r2                        0.470848   0.476310\n#&gt; recall                    0.784232   0.728034\n#&gt; rmse                      0.229443   0.227472\n#&gt; specificity               0.931414   0.950288\n\nextract_h2o_model_name_by_position &lt;- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name &lt;- h2o_leaderboard %&gt;%\n    as_tibble() %&gt;%\n    slice(n) %&gt;%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\n\n#h2o_models_automl@leaderboard %&gt;% \n # extract_h2o_model_name_by_position(1) %&gt;% \n  #h2o.getModel() %&gt;% \n  #h2o.saveModel(path = \"F:/Sneha/ss23-bdml-SnehaPara/Dataset/h20_models/\")\nstacked_ensemble_h2o &lt;- h2o.loadModel(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/h20_models/StackedEnsemble_AllModels_1_AutoML_1_20240430_135534\")\nstacked_ensemble_h2o\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: stackedensemble\n#&gt; Model ID:  StackedEnsemble_AllModels_1_AutoML_1_20240430_135534 \n#&gt; Model Summary for Stacked Ensemble: \n#&gt;                                     key            value\n#&gt; 1                     Stacking strategy cross_validation\n#&gt; 2  Number of base models (used / total)              5/6\n#&gt; 3      # GBM base models (used / total)              4/4\n#&gt; 4      # DRF base models (used / total)              1/1\n#&gt; 5      # GLM base models (used / total)              0/1\n#&gt; 6                 Metalearner algorithm              GLM\n#&gt; 7    Metalearner fold assignment scheme           Random\n#&gt; 8                    Metalearner nfolds                5\n#&gt; 9               Metalearner fold_column               NA\n#&gt; 10   Custom metalearner hyperparameters             None\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.0313265\n#&gt; RMSE:  0.1769929\n#&gt; LogLoss:  0.1139119\n#&gt; Mean Per-Class Error:  0.09331695\n#&gt; AUC:  0.9841469\n#&gt; AUCPR:  0.9102598\n#&gt; Gini:  0.9682938\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     8665  214 0.024102   =214/8879\n#&gt; Yes     190  979 0.162532   =190/1169\n#&gt; Totals 8855 1193 0.040207  =404/10048\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.404608    0.828959 176\n#&gt; 2                       max f2  0.230730    0.868661 232\n#&gt; 3                 max f0point5  0.583335    0.858201 126\n#&gt; 4                 max accuracy  0.435675    0.960291 167\n#&gt; 5                max precision  0.983444    1.000000   0\n#&gt; 6                   max recall  0.016499    1.000000 362\n#&gt; 7              max specificity  0.983444    1.000000   0\n#&gt; 8             max absolute_mcc  0.404608    0.806234 176\n#&gt; 9   max min_per_class_accuracy  0.203574    0.935843 243\n#&gt; 10 max mean_per_class_accuracy  0.182216    0.938241 252\n#&gt; 11                     max tns  0.983444 8879.000000   0\n#&gt; 12                     max fns  0.983444 1168.000000   0\n#&gt; 13                     max fps  0.000854 8879.000000 399\n#&gt; 14                     max tps  0.016499 1169.000000 362\n#&gt; 15                     max tnr  0.983444    1.000000   0\n#&gt; 16                     max fnr  0.983444    0.999145   0\n#&gt; 17                     max fpr  0.000854    1.000000 399\n#&gt; 18                     max tpr  0.016499    1.000000 362\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on validation data. **\n#&gt; \n#&gt; MSE:  0.05485219\n#&gt; RMSE:  0.2342054\n#&gt; LogLoss:  0.1834731\n#&gt; Mean Per-Class Error:  0.1639063\n#&gt; AUC:  0.9419914\n#&gt; AUCPR:  0.7093631\n#&gt; Gini:  0.8839828\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2939 186 0.059520  =186/3125\n#&gt; Yes     110 300 0.268293   =110/410\n#&gt; Totals 3049 486 0.083734  =296/3535\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.277439    0.669643 203\n#&gt; 2                       max f2  0.121439    0.744772 269\n#&gt; 3                 max f0point5  0.572021    0.708609 116\n#&gt; 4                 max accuracy  0.531953    0.928147 126\n#&gt; 5                max precision  0.980437    1.000000   0\n#&gt; 6                   max recall  0.006723    1.000000 382\n#&gt; 7              max specificity  0.980437    1.000000   0\n#&gt; 8             max absolute_mcc  0.277439    0.625044 203\n#&gt; 9   max min_per_class_accuracy  0.099550    0.867520 281\n#&gt; 10 max mean_per_class_accuracy  0.075422    0.874299 296\n#&gt; 11                     max tns  0.980437 3125.000000   0\n#&gt; 12                     max fns  0.980437  409.000000   0\n#&gt; 13                     max fps  0.000908 3125.000000 399\n#&gt; 14                     max tps  0.006723  410.000000 382\n#&gt; 15                     max tnr  0.980437    1.000000   0\n#&gt; 16                     max fnr  0.980437    0.997561   0\n#&gt; 17                     max fpr  0.000908    1.000000 399\n#&gt; 18                     max tpr  0.006723    1.000000 382\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.05000092\n#&gt; RMSE:  0.2236089\n#&gt; LogLoss:  0.1693625\n#&gt; Mean Per-Class Error:  0.1570889\n#&gt; AUC:  0.94984\n#&gt; AUCPR:  0.7455313\n#&gt; Gini:  0.89968\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     9058  436 0.045924   =436/9494\n#&gt; Yes     338  922 0.268254   =338/1260\n#&gt; Totals 9396 1358 0.071973  =774/10754\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.361554    0.704354 190\n#&gt; 2                       max f2  0.122975    0.773354 281\n#&gt; 3                 max f0point5  0.592881    0.732187 122\n#&gt; 4                 max accuracy  0.458442    0.931746 162\n#&gt; 5                max precision  0.983869    1.000000   0\n#&gt; 6                   max recall  0.002346    1.000000 394\n#&gt; 7              max specificity  0.983869    1.000000   0\n#&gt; 8             max absolute_mcc  0.361554    0.664049 190\n#&gt; 9   max min_per_class_accuracy  0.116410    0.886244 285\n#&gt; 10 max mean_per_class_accuracy  0.119095    0.886636 283\n#&gt; 11                     max tns  0.983869 9494.000000   0\n#&gt; 12                     max fns  0.983869 1257.000000   0\n#&gt; 13                     max fps  0.000607 9494.000000 399\n#&gt; 14                     max tps  0.002346 1260.000000 394\n#&gt; 15                     max tnr  0.983869    1.000000   0\n#&gt; 16                     max fnr  0.983869    0.997619   0\n#&gt; 17                     max fpr  0.000607    1.000000 399\n#&gt; 18                     max tpr  0.002346    1.000000 394\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#&gt; accuracy    0.927896  0.007562   0.933547   0.919551   0.919906   0.931469\n#&gt; auc         0.949934  0.011112   0.962411   0.951630   0.957585   0.934624\n#&gt; err         0.072104  0.007562   0.066453   0.080449   0.080094   0.068531\n#&gt; err_count 155.000000 15.280706 145.000000 172.000000 171.000000 147.000000\n#&gt; f0point5    0.687822  0.031571   0.704648   0.652579   0.659509   0.694330\n#&gt;           cv_5_valid\n#&gt; accuracy    0.935005\n#&gt; auc         0.943419\n#&gt; err         0.064995\n#&gt; err_count 140.000000\n#&gt; f0point5    0.728043\n#&gt; \n#&gt; ---\n#&gt;                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; precision           0.671913  0.046676   0.693727   0.619469   0.626822\n#&gt; r2                  0.516472  0.015431   0.536497   0.514982   0.514549\n#&gt; recall              0.769835  0.059306   0.752000   0.830040   0.833333\n#&gt; residual_deviance 727.905600 33.233692 676.769650 723.366600 724.118100\n#&gt; rmse                0.223589  0.003921   0.216843   0.224951   0.227100\n#&gt; specificity         0.948715  0.015671   0.957039   0.931565   0.931806\n#&gt;                   cv_4_valid cv_5_valid\n#&gt; precision           0.692623   0.726923\n#&gt; r2                  0.493890   0.522443\n#&gt; recall              0.701245   0.732558\n#&gt; residual_deviance 757.956500 757.316960\n#&gt; rmse                0.224666   0.224386\n#&gt; specificity         0.960609   0.962553\n\npredictions &lt;- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(predictions)\n\n#&gt; [1] \"environment\"\n\npredictions_tbl &lt;- predictions %&gt;% as_tibble()\npredictions_tbl"
  },
  {
    "objectID": "content/01_journal/03_Automated_ML_H20.html",
    "href": "content/01_journal/03_Automated_ML_H20.html",
    "title": "Automated Machine Learning with H20",
    "section": "",
    "text": "library(tidymodels)\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(stringr)\nemployee_attrition_tbl &lt;- read.table(\"F:/Sneha/ss23-bdml-SnehaPara/Dataset/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt\", header = TRUE, sep = \",\" )\ndept_job_role_tbl &lt;- employee_attrition_tbl %&gt;%\n  select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)\ndept_job_role_tbl %&gt;%\n  \n  group_by(Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n\n\n# Attrition by department\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2: Caution: It's easy to inadvertently miss grouping when creating counts & percents within groups\n  group_by(Department) %&gt;%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n\n\n# Attrition by job role\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\")\n\n\n\n  \n\n\n\n\n# Develop KPI\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  )\n\n\n\n  \n\n\n\n\n# Function to calculate attrition cost\ncalculate_attrition_cost &lt;- function(\n  \n  # Employee\n  n                    = 1,\n  salary               = 80000,\n  \n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n  \n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n  \n) {\n  \n  # Direct Costs\n  direct_cost &lt;- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n  \n  # Lost Productivity Costs\n  productivity_cost &lt;- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n  \n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction &lt;- salary / workdays_per_year * workdays_position_open\n  \n  # Estimated Turnover Per Employee\n  cost_per_employee &lt;- direct_cost + productivity_cost - salary_benefit_reduction\n  \n  # Total Cost of Employee Turnover\n  total_cost &lt;- n * cost_per_employee\n  \n  return(total_cost)\n  \n}\ncalculate_attrition_cost()\n\n#&gt; [1] 78483.33\n\ncalculate_attrition_cost(200)\n\n#&gt; [1] 15696667\n\n\n\n# Function creation\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %&gt;%\n  \n  # Block 4. Set salaray to 80000 for now\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n\n\n  \n\n\n\n\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition)\n\n\n\n  \n\n\n# Function to convert counts to percentages. \ncount_to_pct &lt;- function(data, ..., col = n) {\n  # capture the dots\n  grouping_vars_expr &lt;- quos(...)\n  col_expr &lt;- enquo(col)\n  ret &lt;- data %&gt;%\n    group_by(!!! grouping_vars_expr) %&gt;%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %&gt;%\n    ungroup()\n  return(ret)\n}\ndept_job_role_tbl %&gt;%\n  count(JobRole, Attrition) %&gt;%\n  count_to_pct(JobRole)\n\n\n\n  \n\n\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) \n\n\n\n  \n\n\n\n\ndept_job_role_tbl %&gt;%\n  \n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %&gt;%\n  \n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n\n\n  \n\n\n\n\nassess_attrition &lt;- function(data, attrition_col, attrition_value, baseline_pct) {\n  \n  attrition_col_expr &lt;- enquo(attrition_col)\n  \n  data %&gt;%\n    \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %&gt;%\n    arrange(desc(pct)) %&gt;%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct &gt; baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n  \n}\n \n# Visualization\ndept_job_role_tbl %&gt;%\n  \n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) %&gt;%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %&gt;%\n  \n  # Data Manipulation\n  mutate(name = str_c(Department, JobRole, sep = \": \") %&gt;% as_factor()) %&gt;%\n  \n  # Check levels\n  # pull(name) %&gt;%\n  # levels()\n  \n  mutate(name      = fct_reorder(name, cost_of_attrition)) %&gt;%\n  mutate(cost_text = str_c(\"$\", format(cost_of_attrition / 1e6, digits = 2),\n                           \"M\", sep = \"\")) %&gt;%\n  \n  #Plotting\n  ggplot(aes(cost_of_attrition, y = name)) +\n  geom_segment(aes(xend = 0, yend = name),    color = \"#2dc6d6\") +\n  geom_point(  aes(size = cost_of_attrition), color = \"#2dc6d6\") +\n  scale_x_continuous(labels = scales::dollar) +\n  geom_label(aes(label = cost_text, size = cost_of_attrition),\n             hjust = \"inward\", color = \"#2dc6d6\") +\n  scale_size(range = c(3, 5)) +\n  labs(title = \"Estimated cost of Attrition: By Dept and Job Role\",\n       y = \"\",\n       x = \"Cost of attrition\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n# Descriptive Features\nemployee_attrition_tbl %&gt;% select(Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18)\n\n\n\n  \n\n\n\n\n# Employment Features\nemployee_attrition_tbl %&gt;% select(Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction)\n\n\n\n  \n\n\n\n\n# Compensation Features\nemployee_attrition_tbl %&gt;% select(DailyRate, HourlyRate, MonthlyIncome, MonthlyRate, PercentSalaryHike, StockOptionLevel)\n\n\n\n  \n\n\n\n\n# Survery Results\nemployee_attrition_tbl %&gt;% select(EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance)\n\n\n\n  \n\n\n\n\n# Performance Data\nemployee_attrition_tbl %&gt;% select(JobInvolvement, PerformanceRating)\n\n\n\n  \n\n\n\n\n# Work-Life Features\nemployee_attrition_tbl %&gt;% select(BusinessTravel, OverTime)\n\n\n\n  \n\n\n\n\n# Training & Education\nemployee_attrition_tbl %&gt;% select(Education, EducationField, TrainingTimesLastYear)\n\n\n\n  \n\n\n\n\n# Time-Based Features\nemployee_attrition_tbl %&gt;% select(TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager)\n\n\n\n  \n\n\n\n\nlibrary(GGally)\n# Step 2: Data Visualization ----\nemployee_attrition_tbl %&gt;%\n  select(Attrition,  Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  ggpairs()\n\n\n\n\n\n\n\n\n\n# Explore Features by Category\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n\n#   1. Descriptive features: age, gender, marital status \nemployee_attrition_tbl %&gt;%\n  select(Attrition, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   2. Employment features: department, job role, job level\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"employee\"), contains(\"department\"), contains(\"job\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   4. Survey Results: Satisfaction level, Work Life Balance \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   5. Performance Data: Job Involvement, Performance Rating\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   6. Work-Life Features \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   7. Training and Education \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n#   8. Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"years\")) %&gt;%\n  plot_ggpairs(Attrition)"
  }
]